@code {
    [Parameter]
    public HashSet<string> ActiveExits { get; set; } = new();

    [Parameter]
    public HashSet<string> SecondaryExits { get; set; } = new();

    [Parameter]
    public bool HideInactiveDirections { get; set; } = false;

    [Parameter]
    public EventCallback<string> OnExitClicked { get; set; }

    private static readonly string[] Directions = new[]
    {
        "N", "E", "S", "W"
    };

    private static readonly string[] MinorDirections = new[]
    {
        "NE", "SE", "SW", "NW"
    };

    private static readonly Dictionary<string, double> DirectionAngles = new()
    {
        ["N"] = 0,
        ["NE"] = 45,
        ["E"] = 90,
        ["SE"] = 135,
        ["S"] = 180,
        ["SW"] = 225,
        ["W"] = 270,
        ["NW"] = 315
    };


    private string ClassSelector(string direction)
    {
        if (ActiveExits.Contains(direction))
        {
            return "active";
        }
        if (SecondaryExits.Contains(direction))
        {
            return "secondary";

        }
        return HideInactiveDirections ? "hidden": "inactive";


    }
}

<svg width="200" height="200" viewBox="0 0 200 200"
     xmlns="http://www.w3.org/2000/svg"
     style="background:#444; --tick-color:white; --text-color:white;">

    <style>
        line {
            stroke: var(--tick-color);
            stroke-width: 2;
        }

        circle {
            stroke: var(--tick-color);
            fill: none;
        }

        polygon {
            fill: var(--tick-color);
        }

        text {
            fill: var(--text-color);
            font-size: 25px;
            text-anchor: middle;
        }

        #tick {
            stroke-width: 3;
        }

        #minortick {
            stroke-width: 1;
        }

        .active {
            stroke: lime;
            fill: lime;
            color: lime;
            cursor: pointer;
        }

        .secondary {
            stroke: lightblue;
            fill: lightblue;
            color: lightblue;
            cursor:pointer;
        }
        .inactive{
            --text-color:lightgrey;
            cursor: pointer;
        }
        .hidden {
            display: none;
        }
    </style>

    <circle cx="100" cy="100" r="60"
            stroke="white" stroke-width="1"
            stroke-dasharray="2,3" fill="none" />

    <circle cx="100" cy="100" r="3" fill="white" />

    <defs>
        <line id="tick" x1="100" y1="30" x2="100" y2="50" stroke="white" stroke-width="3" />
        <line id="minortick" x1="100" y1="30" x2="100" y2="50" stroke="white" stroke-width="1" />
        <polygon id="arrow" points="0,-7 7,7 -7,7" />
    </defs>

    <!-- Up/Down arrows -->
    <use id="ord-up" href="#arrow"
         transform="translate(100,75)"
         class="@(ClassSelector("UP"))" 
         @onclick="@(() => OnExitClicked.InvokeAsync("UP"))" />

    <use id="ord-down" href="#arrow"
         transform="translate(100,125) rotate(180)"
         class="@(ClassSelector("DOWN"))" 
         @onclick="@(() => OnExitClicked.InvokeAsync("DOWN"))" />

    <!-- Main ticks -->
    @foreach (var dir in Directions)
    {
        <use href="#tick"
             transform=@($"rotate({DirectionAngles[dir]},100,100)")
             class="@(ClassSelector(dir))"
             @onclick="@(() => OnExitClicked.InvokeAsync(dir))" />
    }

    <!-- Minor ticks -->
    @foreach (var dir in MinorDirections)
    {
        <use href="#minortick"
             transform=@($"rotate({DirectionAngles[dir]},100,100)")
             class="@(ClassSelector(dir))"
             @onclick="@(() => OnExitClicked.InvokeAsync(dir))" />
    }

    <!-- Text labels -->
    <text id="ord-n" x="100" y="25" class="@(ClassSelector("N"))" @onclick="@(() => OnExitClicked.InvokeAsync("N"))">N</text>
    <text id="ord-e" x="185" y="105" class="@(ClassSelector("E"))" @onclick="@(() => OnExitClicked.InvokeAsync("E"))">E</text>
    <text id="ord-s" x="100" y="190" class="@(ClassSelector("S"))" @onclick="@(() => OnExitClicked.InvokeAsync("S"))">S</text>
    <text id="ord-w" x="15" y="105" class="@(ClassSelector("W"))" @onclick="@(() => OnExitClicked.InvokeAsync("W"))">W</text>

    <text id="ord-ne" x="155" y="45" font-size="15" class="@(ClassSelector("NE"))" @onclick="@(() => OnExitClicked.InvokeAsync("NE"))">NE</text>
    <text id="ord-se" x="155" y="165" font-size="15" class="@(ClassSelector("SE"))" @onclick="@(() => OnExitClicked.InvokeAsync("SE"))">SE</text>
    <text id="ord-sw" x="45" y="165" font-size="15" class="@(ClassSelector("SW"))" @onclick="@(() => OnExitClicked.InvokeAsync("SW"))">SW</text>
    <text id="ord-nw" x="45" y="45" font-size="15" class="@(ClassSelector("NW"))" @onclick="@(() => OnExitClicked.InvokeAsync("NW"))">NW</text>

</svg>


