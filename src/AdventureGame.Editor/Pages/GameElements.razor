@page "/gamepack/elements"

@using AdventureGame.Engine.Models
@using AdventureGame.Editor.Components
@using Radzen
@using Radzen.Blazor
@implements IDisposable
@inject AdventureGame.Editor.Services.CurrentGameService CurrentGameService
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenText TextStyle="TextStyle.H3">Elements</RadzenText>

@if (!CurrentGameService.HasCurrent)
{
    <RadzenText>No GamePack selected. Please select a pack from the sidebar.</RadzenText>
}
else
{
    <RadzenButton Icon="add_circle" ButtonStyle="ButtonStyle.Primary" Click="AddElement">Add Element</RadzenButton>
    <RadzenDataGrid Data="@elements" TItem="GameElement" AllowPaging="true" PageSize="10">
        <Columns>
            <RadzenDataGridColumn TItem="GameElement" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="GameElement" Property="Kind" Title="Kind" />
            <RadzenDataGridColumn TItem="GameElement" Title="Actions">
                <Template Context="elem">
                    <RadzenButton Icon="content_copy" Size="ButtonSize.Small" Click="@(async args => await CloneElement(elem))" />
                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditElement(elem))" />
                    <RadzenButton Icon="delete" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Danger" Click="@(args => ConfirmDelete(elem))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private List<GameElement> elements = new();

    protected override void OnInitialized()
    {
        CurrentGameService.OnChange += Reload;
        Reload();
    }

    public void Dispose()
    {
        CurrentGameService.OnChange -= Reload;
    }

    private void Reload()
    {
        // Create a new list instance so RadzenDataGrid sees the changed reference
        elements = CurrentGameService.CurrentPack?.Elements?.ToList() ?? new List<GameElement>();
        InvokeAsync(StateHasChanged);
    }

    private void AddElement()
    {
        var e = new Item { Name = "New Item" } as GameElement;
        CurrentGameService.CurrentPack!.Elements.Add(e);
        CurrentGameService.MarkDirty();
        Reload();
    }

    private void EditElement(GameElement e)
    {
        var parameters = new Dictionary<string, object?> { ["Element"] = e };
        DialogService.OpenSide<GameElementEditor>("Edit Element", parameters);
    }

    private async Task CloneElement(GameElement e)
    {
        // Deep clone via JSON roundtrip
        var json = System.Text.Json.JsonSerializer.Serialize(e, GamePack.JsonOptions);
        var newClone = System.Text.Json.JsonSerializer.Deserialize<GameElement>(json, GamePack.JsonOptions)!;

        try
        {
            var idProp = newClone.GetType().GetProperty("Id");
            if (idProp != null && idProp.CanWrite)
            {
                idProp.SetValue(newClone, ElementId.New());
            }
        }
        catch { }

        CurrentGameService.CurrentPack!.Elements.Add(newClone);
        CurrentGameService.MarkDirty();
        Reload();
    }

    private async Task ConfirmDelete(GameElement e)
    {
        var yes = await DialogService.Confirm($"Delete '{e.Name}'?", "Confirm Delete");
        if (yes == true)
        {
            CurrentGameService.CurrentPack!.Elements.RemoveAll(x => x.Id == e.Id);
            CurrentGameService.MarkDirty();
            Reload();
        }
    }
}