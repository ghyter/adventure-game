@inherits LayoutComponentBase
@inject ThemeService _ThemeService
@inject AdventureGame.Editor.Services.CurrentGameService _currentGame
@inject NotificationService NotificationService

<HeadContent>
    <RadzenTheme Theme="standard" />
</HeadContent>

<RadzenLayout>
    <RadzenHeader>
        <RadzenRow AlignItems="AlignItems.Stretch">
            <RadzenColumn Size="9">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />

                    @if (_currentGame.HasCurrent)
                    {
                        <!-- Title with version/date immediately to the right -->
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8" Style="padding-left:12px;">
                            <RadzenText Class="header-title">@_currentGame.CurrentPack?.Name</RadzenText>

                            <RadzenStack Orientation="Orientation.Horizontal" Gap="6" AlignItems="AlignItems.Center">
                                <RadzenText TextStyle="TextStyle.Caption" Class="version-text">@_currentGame.CurrentPack?.Version</RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" Class="date-text">@(_currentGame.CurrentPack?.ModifiedAt.ToLocalTime().ToString() ?? string.Empty)</RadzenText>
                            </RadzenStack>
                        </RadzenStack>

                        @* Description under the title *@
                        @if (!string.IsNullOrWhiteSpace(_currentGame?.CurrentPack?.Description))
                        {
                            <div style="padding-left:12px; margin-top:6px; max-width:60ch;">
                                <RadzenText TextStyle="TextStyle.Caption" Style="opacity:0.75; display:block; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">@_currentGame.CurrentPack.Description</RadzenText>
                            </div>
                        }
                    }
                    else
                    {
                        <RadzenLabel Text="Header" />
                    }
                </RadzenStack>
            </RadzenColumn>
            <RadzenColumn Size="3">
                <RadzenDropDown Visible="false" Data="themes" @bind-Value="current" Change="OnChange" />
                @code {
                    string[] themes = [
                    "material", "material-dark",
                                "standard", "standard-dark",
                                "default", "dark",
                                "humanistic","humanistic-dark",
                                "software","software-dark"
                    ];
                    string current = "software";
                    void OnChange(object value) => _ThemeService.SetTheme(value?.ToString() ?? "software");
                }

                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="8" JustifyContent="JustifyContent.End">
                    <RadzenAppearanceToggle />
                    <RadzenButton Icon="save" Text="Save" ButtonStyle="ButtonStyle.Primary" Disabled="@(!_currentGame.HasCurrent || !_currentGame.IsDirty)" Click="@(async args => await SaveCurrentAsync())" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    </RadzenHeader>

    <RadzenSidebar Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" Path="/" />
            <RadzenPanelMenuItem Text="Games" Icon="account_box" Path="/games" />
        </RadzenPanelMenu>
            <br/>
            @if (_currentGame.HasCurrent)
            {
            <RadzenPanelMenu>
            @* Show these only when a game pack is selected *@
            <RadzenPanelMenuItem Text="Map" Icon="map" Path="/gamepack/map" />
            <RadzenPanelMenuItem Text="Elements" Icon="widgets" Path="/gamepack/elements" />
            <RadzenPanelMenuItem Text="Verbs" Icon="play_arrow" Path="/gamepack/verbs" />
            <RadzenPanelMenuItem Text="Triggers" Icon="flash_on" Path="/gamepack/triggers" />
            <RadzenPanelMenuItem Text="Media" Icon="perm_media" Path="/gamepack/media" />
            </RadzenPanelMenu>
            }
    </RadzenSidebar>

    <RadzenBody>
        @Body
    </RadzenBody>

    <RadzenFooter>
    </RadzenFooter>
</RadzenLayout>

<style>
    .header-title { font-weight: 600; font-size: 1.25rem; }
    .version-text { opacity: 0.85; font-size: 0.9rem; }
    .date-text { opacity: 0.7; font-size: 0.85rem; }
</style>

@code {
    bool sidebar1Expanded = false;

    protected override void OnInitialized()
    {
        _currentGame.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _currentGame.OnChange -= StateHasChanged;
    }

    private async Task SaveCurrentAsync()
    {
        if (!_currentGame.HasCurrent) return;

        var beforeCount = _currentGame.CurrentPack?.Elements?.Count ?? 0;

        var ok = await _currentGame.SaveCurrentPackAsync();
        if (ok)
        {
            var afterCount = _currentGame.CurrentPack?.Elements?.Count ?? 0;
            if (beforeCount != afterCount)
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Saved (inconsistent)", Detail = $"Saved but element count changed: before={beforeCount}, after={afterCount}", Duration = 5000 });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Saved", Detail = $"GamePack '{_currentGame.CurrentPack?.Name}' saved ({afterCount} elements).", Duration = 3000 });
            }
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Save failed", Detail = "Could not save GamePack to IndexedDB.", Duration = 5000 });
        }
        await InvokeAsync(StateHasChanged);
    }
}
